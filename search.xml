<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[bash 快捷键]]></title>
      <url>%2F2017%2F03%2F25%2Fbash-kuaijie%2F</url>
      <content type="text"><![CDATA[bash快捷键Ctrl + l 清屏， 相当于clear命令 Ctrl + o 执行当前命令， 并重新显示本命令 Ctrl + s 阻止屏幕输出， 锁定 Ctrl + q 允许屏幕输出 Ctrl + c 终止命令 Ctrl + z 挂起命令 Ctrl + a 光标移到命令行首， 相当于Home Ctrl + e 光标移到命令行尾， 相当于End Ctrl + f 光标向右移动一个字符 Ctrl + b 光标向左移动一个字符 Alt + f 光标向右移动一个单词尾 Alt + b 光标向左移动一个单词首 Ctrl + xx 光标在命令行首和光标之间移动 Ctrl + u 从光标处删除至命令行首 Ctrl + k 从光标处删除至命令行尾 Ctrl + w 从光标处向左删除至单词首 Alt + d 从光标处向右删除至单词尾 Ctrl + d 删除光标处的一个字符 Ctrl + h 删除光标前的一个字符 Ctrl + y 将删除的字符粘贴至光标后 Alt + c 从光标处开始向右更改为首字母大写的单词 Alt + u 从光标处开始向右更改为全部大写的单词 Alt + l 从光标处更改为全部小写的单词 Ctrl + t 交换光标处和之前的字符位置 Alt + t 交换光标处和之前的单词位置 Alt + N 提示输入指定字符后， 重复显示该字符N次 注意： Alt组合快捷键经常和其它软件冲突]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[命令行扩展]]></title>
      <url>%2F2017%2F03%2F25%2Fcommand-kuozhan%2F</url>
      <content type="text"><![CDATA[命令行扩展$()或$ 把一个命令的输出打印给另一个命令的参数 $ echo &quot;This system&apos;s name is $(hostname) &quot; This system&apos;s name is server1.example.com $echo &quot;i am `whoami` &quot; i am root 括号扩展： { } 打印重复字符串的简化形式12[root@pxe57 ~]# echo file&#123;1,3,5&#125;file1 file3 file5 12[root@pxe57 ~]# echo &#123;1..10&#125;1 2 3 4 5 6 7 8 9 10 12[root@pxe57 ~]# echo &#123;a..z&#125;a b c d e f g h i j k l m n o p q r s t u v w x y z 12[root@pxe57 ~]# echo &#123;000..20..2&#125;000 002 004 006 008 010 012 014 016 018 020 命令补全 bash根据PATH环境变量定义的路径，自左而右在每个路径搜寻以给定命令 名命名的文件， 第一次找到的命令即为要执行的命令. 用户给定的字符串只有一条惟一对应的命令， 直接补全否则， 再次Tab会给出列表 路径补全 把用户给出的字符串当做路径开头，并在其指定上级目录下搜索以指定的字符串开头的文件名 如果惟一： 则直接补全 否则： 再次Tab给出列表 TAB快捷键 command 2Tab 所有命令行补全 string2Tab 以string开头命令 /2Tab 显示所有根目录下一级目录， 包括隐藏目录 ./2Tab 当前目录下子目录， 包括隐藏目录 *2Tab 当前目录下子目录， 不包括隐藏目录 ~2Tab 所有用户列表 $2Tab 所有变量 @2Tab /etc/hosts记录 （ centos7不支持） =2Tab 相当于ls –A]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[date 命令]]></title>
      <url>%2F2017%2F03%2F25%2Fdate%2F</url>
      <content type="text"><![CDATA[NAME 名称 date date - print or set the system date and time 显示系统的时间和日期。 也可以用来显示或设定系统的日期与时间。 SYNOPSIS 概要 用法 date [OPTION]... [+FORMAT] date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]] 选项 %y : 年份的最后两位数字 (00.99) %Y : 完整年份 (0000-9999) %m : 月份 (01-12) %b : 月份 (Jan-Dec) %B : 月份 (January-December) %c : 直接显示日期与时间 %d : 日 (01-31) %H : 小时(00-23) %M : 分钟(00-59) %p : 显示本地 AM 或 PM %S : 秒(00-60) %T : 直接显示时间 (24 小时制) %X : 相当于 %H:%M:%S %x : 直接显示日期 (mm/dd/yy) %a : 星期几 (Sun-Sat) %D : 直接显示日期 (mm/dd/yy) %j : 一年中的第几天 (001-366) %U : 一年中的第几周 (00-53) (以 Sunday 为一周的第一天的情形) %w : 一周中的第几天 (0-6) %W : 一年中的第几周 (00-53) (以 Monday 为一周的第一天的情形) 示例 123date [root@localhost ~]# dateSat Mar 25 12:34:40 CST 2017 123456789date -s 修改系统日期[root@localhost ~]# date -s &quot;20170630&quot;Fri Jun 30 00:00:00 CST 2017修改系统时间[root@pxe57 ~]# date -s &quot;20170325 1430&quot;Sat Mar 25 14:30:00 CST 2017 12345date +%Y/%m/%d改变日期显示格式[root@pxe57 ~]# date +%Y/%m/%d2017/03/25 显示日历：如果要列出目前这个月份可以直接执行cal。 [root@pxe57 ~]# cal March 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 显示全年日历[root@pxe57 ~]# cal -y 2017 January February March Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 1 2 3 4 1 2 3 4 8 9 10 11 12 13 14 5 6 7 8 9 10 11 5 6 7 8 9 10 11 15 16 17 18 19 20 21 12 13 14 15 16 17 18 12 13 14 15 16 17 18 22 23 24 25 26 27 28 19 20 21 22 23 24 25 19 20 21 22 23 24 25 29 30 31 26 27 28 26 27 28 29 30 31 April May June Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 1 2 3 4 5 6 1 2 3 2 3 4 5 6 7 8 7 8 9 10 11 12 13 4 5 6 7 8 9 10 9 10 11 12 13 14 15 14 15 16 17 18 19 20 11 12 13 14 15 16 17 16 17 18 19 20 21 22 21 22 23 24 25 26 27 18 19 20 21 22 23 24 23 24 25 26 27 28 29 28 29 30 31 25 26 27 28 29 30 30 July August September Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 1 2 3 4 5 1 2 2 3 4 5 6 7 8 6 7 8 9 10 11 12 3 4 5 6 7 8 9 9 10 11 12 13 14 15 13 14 15 16 17 18 19 10 11 12 13 14 15 16 16 17 18 19 20 21 22 20 21 22 23 24 25 26 17 18 19 20 21 22 23 23 24 25 26 27 28 29 27 28 29 30 31 24 25 26 27 28 29 30 30 31 October November December Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 1 2 3 4 1 2 8 9 10 11 12 13 14 5 6 7 8 9 10 11 3 4 5 6 7 8 9 15 16 17 18 19 20 21 12 13 14 15 16 17 18 10 11 12 13 14 15 16 22 23 24 25 26 27 28 19 20 21 22 23 24 25 17 18 19 20 21 22 23 29 30 31 26 27 28 29 30 24 25 26 27 28 29 30 31 显示指定月份日历 [root@pxe57 ~]# cal 03 2017 March 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[echo 命令]]></title>
      <url>%2F2017%2F03%2F25%2Fecho%2F</url>
      <content type="text"><![CDATA[ECHONAME 名称 echo - display a line of text echo - 在屏幕上显示一段文字 SYNOPSIS 概要 echo [SHORT-OPTION]... [STRING]... echo [短选项]... [字符串] echo LONG-OPTION echo 长选项 DESCRIPTION 描述 Echo the STRING(s) to standard output. Echo是字符的标准输出 -n do not output the trailing newline 输出时不自动换行 -e enable interpretation of backslash escapes 启用\字符功能 -E disable interpretation of backslash escapes （默认）不支持\解释功能 (default) If -e is in effect, the following sequences are rec-ognized: 启用命令选项-e，若字符串中出现以下字符， 则特别加以处理， 而不会将它当成一般文字输出 \\ backslash 插入\字符 \a alert (BEL) 发出警告声 \b backspace 向前删除一个字符 \c produce no further output 最后不加换行符号 \f form feed 换行但光标仍旧停留在原来的位置 \n new line 换行且光标移至行首 \r carriage return 回车，即光标移至行首 \t horizontal tab 插入tab \v vertical tab 垂直插入tab，与\f显示相同 \0NNN byte with octal value NNN (1 to 3 digits) 插入（nnn）八进制所代表的ASCII字符； /bin/echo --help 查看help帮助 /bin/echo --version 查看当前版本echo版本 示例 123echo abcdefghijklmnopqrstuvwxyz[root@localhost ~]# echo abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz 123echo -n [root@localhost ~]# echo -n abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz[root@localhost ~]# 123echo -e \\[root@localhost ~]# echo -e &quot;\\ abcdefghijklmnopqrstuvwxyz&quot;\ abcdefghijklmnopqrstuvwxyz 123echo -e \b[root@localhost ~]# echo -e &quot;abcdefghijklmnopqrstuvwxy\bz&quot;abcdefghijklmnopqrstuvwxz 123echo -e \c[root@localhost ~]# echo -e &quot;abcdefghijklmnopqrstuvwxyz\c&quot;abcdefghijklmnopqrstuvwxyz[root@localhost ~]# 1234echo -e \f[root@localhost ~]# echo -e &quot;abcd\fefghijklmnopqrstuvwxyz&quot;abcd efghijklmnopqrstuvwxyz 1234echo -e \n[root@localhost ~]# echo -e &quot;\nabcdefghijklmnopqrstuvwxyz&quot;abcdefghijklmnopqrstuvwxyz]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux 基础]]></title>
      <url>%2F2017%2F03%2F24%2FLinux%2F</url>
      <content type="text"><![CDATA[Linux中的用户 在Linux中一般分为两个用户： root用户：一个特殊的管理账户，也被称为超级用户，在Windows中相当于administrato管理&gt;员。root已接近完整的系统控制，对系统损害几乎有无限的能力，在平时的生产环境中，除非需要做特定的操作，否则一般情况下不在root用户下对系统进行操作。 普通用户： 普通用户也叫非特权用户，它对系统操作的权限有限，所以普通用户的操作对操作系统造成的损害的能力也比较有限。 用户登录信息查看命令：123whoami: 显示当前登录有效用户who: 系统当前所有的登录会话w: 系统当前所有的登录会话及所做的操作 终端 终端： 终端分为设备终端，物理终端，虚拟终端，图形终端，串行终端，伪终端。 设备终端： 键盘鼠标显示器。 物理终端： 在(/dev/console) 下，控制台console。 虚拟终端：（tty：tele type writers，/dev/tty# #为[1-6] ） 在(/dev/tty）下，tty可以有多个，可以使用Ctrl+Alt+F[1-6] 来进行切换。 图形终端：(/dec/tty7) startx，xwindows 在(/dec/tty7)下， 在CentOS6中：启动图形终端为Ctrl+Alt+F7。 在CentOS7中：启动图形终端为：在哪个终端启动就为于哪个终端。 串行终端： 在(/dev/ttyS#)下，使用串行接口输出的终端设备。 伪终端：（pty：pseudo-tty ，/dev/pts/#） 在(/dev/pts/#)下,pts,SSH远程连接；使用Xshell或CRT进行远程连接的都称为伪终端。 查看当前的终端设备： [root@localhost ~]# tty /dev/pts/0 交互式接口 交互式接口： 在启动终端后，在终端设备附加一个交互式应用程序，其实就是选择桌面或者是黑屏代码模式。 交互式程序： 交互式程序分为两类：GUI和CLI； GUI：Graphic User Interface图形用户界面，又称图形用户接口。 Xprotocol，window manager，desktop Desktop： GNOME（c语言编写，图形库gtk） KDE（c++编写，图形库qt） XFCE（c语言编写，图形库gtk+） CLI：Command Line Interface命令行界面，又称命令行接口。 shell程序：sh，csh，tcsh，ksh，bash，zsh SHELL Shell是一种高级程序设计语言，它是Linux系统的用户界面，为提供用户与内核进行交互操作的一种接口，他接受用户输入的命令并把它送入内核去执行，shell也被称为Linux的命令解释器（Command interpreter）。 BASH SHELL GNU Bourne-Again Shell（bash）是GNU计划中重要的工具软件之一，目前也是Linux标准的shell，与sh兼容。 CentOS中默认使用的是bash。 显示当前使用的shell：12[root@localhost ~]# echo $SHELL/bin/bash 显示当前系统使用的所有shell：12345678910 [root@localhost ~]# cat /etc/shells /bin/sh /bin/bash /sbin/nologin /usr/bin/sh /usr/bin/bash /usr/sbin/nologin /bin/tcsh /bin/csh` 命令提示符 [root@localhost ~]# #：当前用户为管理员 [lee@localhost root]$ $：当前用户为普通用户 显示提示符格式： [lee@localhost root]$ echo $PS1 [\u@\h \W]\$ PS1=”[\e[31m][\u@\h \W]\$[\e[0m]“12345678910\e\033 修改命令符颜色\u 当前用户\h 主机名简称 \H 主机名\w 当前工作目录 \W 当前工作目录基名\t 24小时时间格式 \T 12小时时间格式\! 命令历史数 \# 开机后命令历史数 执行命令 输入命令后回车： 提请shell程序找到键入命令所对应的可执行程序或代码，并由其分析后提交给内核分配资源将其运行起来。 在shell中可执行的命令有两类： 内部命令，外部命令 内部命令： 由shell自带的，而且通过某命令形式提供。 help：内部命令列表。 enable cmd：可以启用。 enable -n cmd：禁用内部命令。 enable -n：查看所有禁用的内部命令。 外部命令： 在文件系统路径下有对应的可执行程序文件。 查看路径： which -a，which --skip-alias，whereis 区别指定的命令是内部的还是外部的： [lee@localhost root]$ type cd cd is a shell builtin 内部命令 [lee@localhost root]$ type ll ll is aliased to `ls -l --color=auto&apos; 外部命令 在文件系统路径下有对应的可执行程序文件。 查看路径： which -a，which --skip-alias，whereis 区别指定的命令是内部的还是外部的： [lee@localhost root]$ type cd cd is a shell builtin 内部命令 [lee@localhost root]$ type ll ll is aliased to `ls -l --color=auto&apos; 外部命令 Hash缓存表 系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将这条命令路径记录到hash表中，当再次使用该命令时，shell解释器首先会查看hash表，存在将执行，如果不存在，将会去PATH路径下寻找。利用hash缓存表可大大提高命令的调用速率。 Hash常见用法： hash：显示hash缓存。 hash -l：显示hash缓存，可作为输入使用。 hash -p path name：将命令全路径path起别名为name。 hash -t name：打印缓存中的name的路径。 hash -d name ：清除name的缓存。 hash -r ：清除缓存。 别名 命令别名：123456789101112显示当前shell进程所有可用的命令别名： [root@localhost ~]# alias alias cp=&apos;cp -i&apos; alias egrep=&apos;egrep --color=auto&apos; alias fgrep=&apos;fgrep --color=auto&apos; alias grep=&apos;grep --color=auto&apos; alias l.=&apos;ls -d .* --color=auto&apos; alias ll=&apos;ls -l --color=auto&apos; alias ls=&apos;ls --color=auto&apos; alias mv=&apos;mv -i&apos; alias rm=&apos;rm -i&apos; alias which=&apos;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&apos; 定义别名：12345定义别名name，其相当于执行命令VALUE：[root@localhost ~]# alias lqb=&apos;ls -a&apos;[root@localhost ~]# lqb. anaconda-ks.cfg .bash_logout .bashrc .config .ssh .Xauthority.. .bash_history .bash_profile .cache .cshrc .tcshrc 在命令行中定义的别名，仅对当前shell进程有效，如果想永久保存要定义在配置文件中：12仅对当前用户有效：~/.bashrc 对所有用户有效：. /etc/bashrc 编辑配置给出的新配置不会立即生效 bash进程重新读取配置文件12source /path/to/config_file./path/to/config_file 撤销别名：unalias12345 unalias [-a] name [name ...] -a 取消所有别名[root@localhost ~]# unalias lqb[root@localhost ~]# lqbbash: lqb: command not found 如果别名同原命令同名， 如果要执行原命令， 可使用:123“\COMMAND”’COMMAND’/PATH/COMMAND： 外部命令 命令行格式 12345 COMMAND [OPTIONS...] [ARGUMENTS...]选项： 用于启用或关闭命令的某个或某些功能；短选项： -c, 例如： -l, -h长选项： --word， 例如： --all, --human-readable参数： 命令的作用对象， 比如文件名， 用户名等 注意： 1.多选项，以及多参数和命令之间使用空白字符分隔 2.取消和结束命令执行： Ctrl+c，Ctrl+d 3.多个命令可以用；符号分开 4.一个命令可以用\分成多行 date：显示日期和时间 Linux的两种时钟： 系统时钟： 由Linux内核通过CPU的工作频率进行的 硬件时钟： 主板 hwclock， clock: 显示硬件时钟 -s, --hctosys 以硬件时钟为准， 校正系统时钟 -w, --systohc 以系统时钟为准， 校正硬件时钟 时区： /etc/localtime cal： 显示日历 cal –y：显示全年日历 开机关机 关机：1halt, poweroff 重启：123reboot-f: 强制， 不调用shutdown-p: 切断电源 关机或重启:shutdown1234567shutdown [OPTION]... TIME [MESSAGE]-r: reboot-h: halt-c： cancelTIME:now: 立刻+m: 相对时间表示法， 多久之后； 例如 +3hh:mm: 绝对时间表示， 指明具体时间 screen命令 1234567891011121314创建新screen会话： screen –S [SESSION]加入screen会话： screen –x [SESSION]离线某个会话： screen –d [SESSION]恢复某screen会话： screen -r [SESSION]退出并关闭screen会话 ： exit剥离当前screen会话： Ctrl+a,d显示所有已经打开的screen会话： screen -l echo命令 123功能： 显示字符语法： echo [-neE][字符串]说明： echo会将输入的字符串送往标准输出。 输出的字符串间以空白字符隔开, 并在最后加上换行号 选项：1234567891011121314151617&gt;-E （ 默认） 不支持 \ 解释功能-n 不自动换行-e 启用 \ 字符的解释功能 显示变量： echo &quot;$VAR_NAME“ 变量会替换， 弱引用 echo &apos;$VAR_NAME‘ 变量不会替换， 强引用 启用命令选项-e， 若字符串中出现以下字符， 则特别加以处理， 而不会将它当成一般文字输出\a 发出警告声\b 退格键\c 最后不加上换行符号\n 换行且光标移至行首\r 回车， 即光标移至行首， 但不换行\t 插入tab\\ 插入\字符\0nnn 插入nnn（ 八进制） 所代表的ASCII字符echo -e &apos;\033[43;31;5mmagedu\033[0m&apos;\xHH插入HH（ 十六进制） 所代表的ASCII字]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F14%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
